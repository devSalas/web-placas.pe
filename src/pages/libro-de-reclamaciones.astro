---
import Layout from "@layouts/Layout.astro";

interface FormField {
    id: string;
    label: string;
    type: string;
    required?: boolean;
    minLength?: number;
    maxLength?: number;
    pattern?: string;
  }
  
  const personalFields: FormField[] = [
    {
      id: "licensePlate",
      label: "Nro. Placa",
      type: "text",
      required: true,
      pattern: "^[A-Z0-9]{6,7}$"
    },
    {
      id: "names",
      label: "Nombres",
      type: "text",
      required: true,
      minLength: 2,
      maxLength: 50
    },
    {
      id: "surnames",
      label: "Apellidos",
      type: "text",
      required: true,
      minLength: 2,
      maxLength: 50
    },
    {
      id: "address",
      label: "Dirección",
      type: "text",
      required: true,
      minLength: 5,
      maxLength: 100
    },
    {
      id: "phone",
      label: "Teléfono Fijo / Celular",
      type: "tel",
      required: true,
      pattern: "^[0-9]{9}$"
    },
    {
      id: "email",
      label: "E-Mail",
      type: "email",
      required: true
    }
  ];
  
  const documentTypes = [
    { value: "dni", label: "DNI" },
    { value: "ce", label: "Carnet de Extranjería" },
    { value: "passport", label: "Pasaporte" }
  ];
  ---

<Layout title="Libro De Reclamaciones">
    

<form id="complaintForm" class="max-w-3xl mx-auto bg-white p-8 rounded-xl shadow-sm" novalidate>
  <!-- Código de Reclamo y Fecha -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-1">
        Código Reclamo
      </label>
      <input
        type="text"
        id="complaintCode"
        readonly
        value={`R${new Date().getTime()}`}
        class="w-full px-4 py-2 bg-gray-50 border border-gray-300 rounded-lg"
      />
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-1">
        Fecha
      </label>
      <input
        type="date"
        id="date"
        value={new Date().toISOString().split('T')[0]}
        readonly
        class="w-full px-4 py-2 bg-gray-50 border border-gray-300 rounded-lg"
      />
    </div>
  </div>

  <!-- Datos del Cliente -->
  <div class="bg-gray-50 p-6 rounded-lg mb-8">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">Datos del Cliente</h3>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      {personalFields.map(field => (
        <div>
          <label for={field.id} class="block text-sm font-medium text-gray-700 mb-1">
            {field.label}
          </label>
          <input
            type={field.type}
            id={field.id}
            name={field.id}
            required={field.required}
            minLength={field.minLength}
            maxLength={field.maxLength}
            pattern={field.pattern}
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
          />
          <p class="mt-1 text-sm text-red-600 hidden"></p>
        </div>
      ))}

      <div class="grid grid-cols-2 gap-4">
        <div>
          <label for="documentType" class="block text-sm font-medium text-gray-700 mb-1">
            Documento
          </label>
          <select
            id="documentType"
            name="documentType"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
          >
            <option value="">Seleccione</option>
            {documentTypes.map(doc => (
              <option value={doc.value}>{doc.label}</option>
            ))}
          </select>
          <p class="mt-1 text-sm text-red-600 hidden"></p>
        </div>
        <div>
          <label for="documentNumber" class="block text-sm font-medium text-gray-700 mb-1">
            Nro. Documento
          </label>
          <input
            type="text"
            id="documentNumber"
            name="documentNumber"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
          />
          <p class="mt-1 text-sm text-red-600 hidden"></p>
        </div>
      </div>

      <div class="col-span-2">
        <div class="flex items-center gap-4">
          <label class="flex items-center">
            <input
              type="checkbox"
              id="sendEmail"
              name="sendEmail"
              class="w-4 h-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
            />
            <span class="ml-2 text-sm text-gray-600">Enviar reclamo a Email del usuario</span>
          </label>
          <label class="flex items-center">
            <input
              type="checkbox"
              id="isMinor"
              name="isMinor"
              class="w-4 h-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
            />
            <span class="ml-2 text-sm text-gray-600">Reclamante es menor de edad</span>
          </label>
        </div>
      </div>
    </div>
  </div>

  <!-- Identificación del Bien Contratado -->
  <div class="bg-gray-50 p-6 rounded-lg mb-8">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">Identificación del Bien Contratado</h3>
    <div class="mb-4">
      <div class="flex items-center gap-6">
        <label class="flex items-center">
          <input
            type="radio"
            name="contractType"
            value="service"
            required
            class="w-4 h-4 text-indigo-600 border-gray-300 focus:ring-indigo-500"
          />
          <span class="ml-2 text-sm text-gray-600">Servicio</span>
        </label>
        <label class="flex items-center">
          <input
            type="radio"
            name="contractType"
            value="product"
            required
            class="w-4 h-4 text-indigo-600 border-gray-300 focus:ring-indigo-500"
          />
          <span class="ml-2 text-sm text-gray-600">Producto</span>
        </label>
      </div>
      <p class="mt-1 text-sm text-red-600 hidden"></p>
    </div>
    <div>
      <label for="contractDescription" class="block text-sm font-medium text-gray-700 mb-1">
        Descripción
      </label>
      <textarea
        id="contractDescription"
        name="contractDescription"
        required
        rows="3"
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
      ></textarea>
      <p class="mt-1 text-sm text-red-600 hidden"></p>
    </div>
  </div>

  <!-- Detalle de la Reclamación -->
  <div class="bg-gray-50 p-6 rounded-lg mb-8">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">Detalle de la Reclamación</h3>
    <div class="mb-4">
      <div class="flex items-center gap-6">
        <label class="flex items-center">
          <input
            type="radio"
            name="complaintType"
            value="complaint"
            required
            class="w-4 h-4 text-indigo-600 border-gray-300 focus:ring-indigo-500"
          />
          <span class="ml-2 text-sm text-gray-600">Reclamo</span>
        </label>
        <label class="flex items-center">
          <input
            type="radio"
            name="complaintType"
            value="claim"
            required
            class="w-4 h-4 text-indigo-600 border-gray-300 focus:ring-indigo-500"
          />
          <span class="ml-2 text-sm text-gray-600">Queja</span>
        </label>
      </div>
      <p class="mt-1 text-sm text-red-600 hidden"></p>
    </div>
    <div>
      <label for="complaintDescription" class="block text-sm font-medium text-gray-700 mb-1">
        Descripción
      </label>
      <textarea
        id="complaintDescription"
        name="complaintDescription"
        required
        rows="5"
        maxlength="750"
        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
      ></textarea>
      <div class="flex justify-between mt-1">
        <p class="text-sm text-red-600 hidden"></p>
        <span class="text-sm text-gray-500">
          <span id="charCount">0</span>/750 caracteres
        </span>
      </div>
    </div>

    <div class="mt-4">
      <label class="block text-sm font-medium text-gray-700 mb-1">
        Adjuntar archivos adicionales
      </label>
      <input
        type="file"
        id="attachments"
        name="attachments"
        multiple
        accept=".doc,.docx,.pdf,.jpg,.jpeg"
        class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100"
      />
      <p class="mt-1 text-sm text-gray-500">Formatos permitidos: DOC, DOCX, PDF, JPG y JPEG</p>
    </div>
  </div>

  <!-- Términos y Botones -->
  <div class="space-y-6">
    <label class="flex items-center">
      <input
        type="checkbox"
        id="terms"
        name="terms"
        required
        class="w-4 h-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
      />
      <span class="ml-2 text-sm text-gray-600">
        Acepto bajo Declaración Jurada los hechos descritos en el presente reclamo
      </span>
    </label>
    <p class="mt-1 text-sm text-red-600 hidden"></p>

    <div class="flex flex-wrap gap-4">
      <button
        type="submit"
        class="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        Enviar
      </button>
      <button
        type="button"
        class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
      >
        Imprimir
      </button>
      <button
        type="button"
        class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
      >
        Inicio
      </button>
    </div>
  </div>
</form>

<script>
  const form = document.getElementById('complaintForm') as HTMLFormElement;
  const complaintDescription = document.getElementById('complaintDescription') as HTMLTextAreaElement;
  const charCount = document.getElementById('charCount') as HTMLSpanElement;

  // Character counter
  complaintDescription?.addEventListener('input', (e) => {
    const target = e.target as HTMLTextAreaElement;
    const current = target.value.length;
    charCount.textContent = current.toString();
  });

  // Document type validation
  const documentTypeSelect = document.getElementById('documentType') as HTMLSelectElement;
  const documentNumberInput = document.getElementById('documentNumber') as HTMLInputElement;

  documentTypeSelect?.addEventListener('change', () => {
    const documentType = documentTypeSelect.value;
    
    if (documentType === 'dni') {
      documentNumberInput.pattern = '^[0-9]{8}$';
      documentNumberInput.maxLength = 8;
    } else if (documentType === 'ce') {
      documentNumberInput.pattern = '^[0-9]{9}$';
      documentNumberInput.maxLength = 9;
    } else if (documentType === 'passport') {
      documentNumberInput.pattern = '^[A-Z0-9]{6,12}$';
      documentNumberInput.maxLength = 12;
    }
  });

  // Form validation
  const showError = (input: HTMLElement, message: string) => {
    const errorElement = input.nextElementSibling as HTMLParagraphElement;
    errorElement.textContent = message;
    errorElement.classList.remove('hidden');
    input.classList.add('border-red-500');
  };

  const hideError = (input: HTMLElement) => {
    const errorElement = input.nextElementSibling as HTMLParagraphElement;
    errorElement.textContent = '';
    errorElement.classList.add('hidden');
    input.classList.remove('border-red-500');
  };

  const validateInput = (input: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {
    if (input.required && !input.value) {
      showError(input, 'Este campo es requerido');
      return false;
    }

    if (input.type === 'email' && input.value) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(input.value)) {
        showError(input, 'Email inválido');
        return false;
      }
    }

    if (input.pattern && input.value) {
      const regex = new RegExp(input.pattern);
      if (!regex.test(input.value)) {
        showError(input, 'Formato inválido');
        return false;
      }
    }

    hideError(input);
    return true;
  };

  form?.addEventListener('submit', (e) => {
    e.preventDefault();
    let isValid = true;

    // Validate all inputs
    const inputs = form.querySelectorAll('input:not([type="file"]), select, textarea');
    inputs.forEach((input) => {
      if (!validateInput(input as HTMLInputElement)) {
        isValid = false;
      }
    });

    // Validate radio buttons
    ['contractType', 'complaintType'].forEach(name => {
      const radioGroup = form.querySelector(`input[name="${name}"]:checked`);
      if (!radioGroup) {
        const errorElement = form.querySelector(`input[name="${name}"]`)?.parentElement?.parentElement?.querySelector('.text-red-600');
        if (errorElement) {
          errorElement.textContent = 'Seleccione una opción';
          errorElement.classList.remove('hidden');
          isValid = false;
        }
      }
    });

    // Validate terms checkbox
    const terms = form.querySelector('#terms') as HTMLInputElement;
    if (!terms.checked) {
      showError(terms.parentElement as HTMLElement, 'Debe aceptar los términos');
      isValid = false;
    }

    if (isValid) {
      // Here you would typically submit the form data
      console.log('Form is valid, submitting...');
      // form.submit();
    }
  });

  // Live validation on blur
  form?.addEventListener('blur', (e) => {
    const target = e.target as HTMLInputElement;
    if (target.tagName === 'INPUT' || target.tagName === 'SELECT' || target.tagName === 'TEXTAREA') {
      validateInput(target);
    }
  }, true);

  // File validation
  const attachments = document.getElementById('attachments') as HTMLInputElement;
  attachments?.addEventListener('change', (e) => {
    const target = e.target as HTMLInputElement;
    const files = target.files;
    const maxSize = 5 * 1024 * 1024; // 5MB
    const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'image/jpeg', 'image/jpg'];

    if (files) {
      for (let i = 0; i < files.length; i++) {
        if (files[i].size > maxSize) {
          alert(`El archivo ${files[i].name} excede el tamaño máximo permitido de 5MB`);
          target.value = '';
          return;
        }
        if (!allowedTypes.includes(files[i].type)) {
          alert(`El archivo ${files[i].name} no tiene un formato permitido`);
          target.value = '';
          return;
        }
      }
    }
  });
</script>

</Layout>